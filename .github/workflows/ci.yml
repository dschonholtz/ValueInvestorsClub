name: ValueInvestorsClub CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Python linting
        run: |
          # Install linting tools with --system flag to avoid virtual env issues
          uv pip install --system ruff mypy
          ruff check .
          mypy api/
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          
      - name: Frontend linting
        run: |
          cd frontend
          npm ci
          npm run lint

  docker-tests:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Run database setup first
      - name: Set up database
        run: docker-compose -f docker-compose.test.yml up -d test-db
      
      - name: Run database initialization
        run: docker-compose -f docker-compose.test.yml up --build db-setup
        
      # Run backend tests
      - name: Run backend tests
        run: docker-compose -f docker-compose.test.yml up --exit-code-from backend-tests backend-tests
          
      # Run schema validation tests
      - name: Run schema validation
        run: docker-compose -f docker-compose.test.yml up --exit-code-from schema-tests schema-tests

      # Run frontend tests
      - name: Run frontend tests 
        run: docker-compose -f docker-compose.test.yml up --exit-code-from frontend-tests frontend-tests
          
      - name: Clean up
        run: docker-compose -f docker-compose.test.yml down

  # Backup non-Docker approach in case needed
  backup-backend-tests:
    runs-on: ubuntu-latest
    needs: [docker-tests]
    if: ${{ failure() }}
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ideas
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install from all requirements files
          pip install -r requirements.txt
          pip install -r test-requirements.txt
          pip install -r api/requirements.txt
      
      - name: Set up test database
        run: |
          export SKIP_DB_VERIFY=true
          python -m api.tests.setup_test_db --drop
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_ideas
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          TEST_DB_NAME: test_ideas
      
      - name: Run backend tests
        run: |
          # Skip the production database test since we don't have vic_ideas.sql in CI
          python -m pytest api/tests/ -v -k "not test_production_database_tables_exist" --cov=api --cov-report=xml
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_ideas
          SKIP_DB_VERIFY: true